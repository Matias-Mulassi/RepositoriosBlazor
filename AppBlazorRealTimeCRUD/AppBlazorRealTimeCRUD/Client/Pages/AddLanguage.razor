@page "/addlanguage"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HttpClient HttpCLient

<h3>Create Language</h3>

<EditForm Model="@language">

    <div class="row">
        <div class="col col-md-8">
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input for="Name" class="form-control"  @bind="@language.Name" />
            </div>
            <div class="form-group">
                <label for="Website" class="control-label">Website</label>
                <input for="Website" class="form-control"  @bind="@language.WebSite" />
            </div>
            <div class="form-group">
                <label for="Extensions" class="control-label">Extensions</label>
                <input for="Extensions" class="form-control" @bind="@language.Extensions" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" value="Save" @onclick="@CreateLanguage" />
                <input type="button" class="btn btn-secondary" value="Cancel" @onclick="@Cancel" />
            </div>
        </div>
    </div>


</EditForm>


@code {
    ProgrammingLanguage language = new ProgrammingLanguage();
    private HubConnection hubConnection; //Para que la app sea en tiempo real


    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/languageshub")).Build(); //COnseguimos conexion con el huB. El componente esta escuchando permanente

        await hubConnection.StartAsync();

    }

    protected async Task CreateLanguage()
    {
        await HttpCLient.PostAsJsonAsync("api/ProgrammingLanguages", language);
        if(IsConnected)await SendMessage();

        NavigationManager.NavigateTo("/languageslist");
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/languageslist");
    }


}
